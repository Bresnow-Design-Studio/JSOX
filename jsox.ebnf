Name     = "JSON Grammar".
Author   = "someone".
Version  = "1.0".
Val =  "Value" ( ("(Comment)" ( ( "/" "/" { "character not \n" } "\n" )
                  | ( "/" "*" { "character" } "*" "/" )
                  ))|
       ("(String)" ( ( '"' (( 'character not " or \ ' ) | ( '\' '"' ) | ("\" "\" ) )  { ( 'character not " or \ ' ) | ( '\' '"' ) | ("\" "\" ) } '"' ) |
                     ( "'" ( "character not ' or \"     | ( "\" "'" ) | ("\" "\" ) ) { "character not ' or \"       | ( "\" "'" ) | ("\" "\" ) } "'" ) |
                     ( "`" ( "character not ` or \"     | ( "\" '`' ) | ("\" "\" ) )  { "character not ` or \"      | ( "\" '`' ) | ("\" "\" ) } "`" ) )
       )|
       ( "(ident)" ( "String" | ( "non-digit" | "non-operator" | "not { [ ] } , :" | "unicode non-identifier characters" | "a-z" "A-Z" ) { | "non-operator" | "not { [ ] } , :" | "unicode non-identifier characters" | "a-z" "A-Z" "0-9" } )
       )|
       ("(Number/Date/BigInt)" 
		( |"-") ( "NaN" | "Infinity" | 
                  ( ( "-" | "+" ) { "-" | "+" } | ("0-9")  )
                    ( "/*  underscore '_' between any following sequence's symbols */"   | ( { "0-9" } "n" ) |
                	( ( "0" ( 
                            ( ( "x" | "X" ) ("0-9" | "A-F" | "a-f") { "0-9" | "A-F" | "a-f" } ) |
                            ( ( "o" | "O" ) "0-7" { "0-7" } ) |
                            ( ( "b" | "B" ) "0-1" { "0-1" ) |
                            ( "0-7" {"0-7"})
                            )
	       		  )
                	  | ( "0-9" | ".  only one decimal allowed" ) { "0-9" | ".  only one decimal allowed"} (  | ( ( "e" | "E" ) ( "0-9" | "+" "0-9" | "-" "0-9" ) { "0-9" } ) )
                        ) ( |"NOT THESE:" ( "0-9"| "-"| ":"| "+"| "A-F"| "a-f"  ) ) ( "," | "}" | "]" | "whitespace /* outside of array or object */" )
                        | ( (("0-9" | ":" | "T" | "-" | "+"){ "0-9" | ":" | "T" | "-" | "+"  }) ( ("+"|"-") "0-9" "0-9" ":" "0-9" "0-9" | "Z" ) )  
                          
                 ))) |
       ( "(Object)" "{" ( ident ":" Value ) { "," (ident ":" Value) } "}" ) | 
       ( "(typed-object-def)"  ident "{" ( ident ) { "," (ident ) } "}" ) | 
       ( "(typed-object-use)"  ident "{" ( Value ) { "," (Value) } "}" ) | 
       ( "(Array)" "[" ( Value ) { "," Value } "]" ) | 
       ( "(typed-array)" "ident" "[" ( Value ) { "," Value } "]" ) | 
       ( "(typed-string)" "ident" String ) | 
       true | false  | null | undefined )).
